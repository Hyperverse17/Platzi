
NumPy (Numerical Python) es una librería de Python diseñada para trabajar con datos numéricos y arreglos multidimensionales (arrays o matrices) de forma rápida y eficiente.

En pocas palabras:

    Te permite manejar grandes cantidades de datos numéricos de forma más compacta que las listas de Python.

    Ofrece operaciones matemáticas y estadísticas optimizadas que trabajan directamente sobre estos arrays.

    Es la base de muchas otras librerías de ciencia de datos y machine learning (como pandas, scikit-learn o TensorFlow).

¿Cómo manejar las dimensiones en NumPy?
Las dimensiones en NumPy transforman tu manera de trabajar con datos. Entender cómo manejar y manipular datos en múltiples dimensiones es crucial para cualquier científico de datos, pues permite abordar problemas complejos con mayor eficiencia y precisión. En este artículo, aprenderás a trabajar con diferentes dimensiones en NumPy, desde un simple valor escalar hasta complejos sensores multidimensionales, explorando ejemplos prácticos y métodos matemáticos útiles.

¿Qué es un escalar en NumPy?
Un escalar en NumPy es el equivalente a un valor simple o único, representado como una dimensión cero. Por ejemplo, si estás interesado en la temperatura de tu ciudad en un día cualquiera, este dato sería un escalar. Imagina que queremos representar la temperatura de un día determinado, un valor simple de 42 grados:

import numpy as np

escalar = np.array(42)
print(escalar)  # Salida: 42
print(type(escalar))  # Salida: <class 'numpy.ndarray'>
¿Cómo crear un vector?
Pues bien, si lo que deseas es almacenar datos de toda una semana, entonces necesitas un vector. Un vector es una secuencia ordenada y se representa como una dimensión uno en NumPy:

vector = np.array([30, 29, 42, 35, 33, 36, 42])
print(vector)
El vector anterior representa una lista de temperaturas durante una semana, cada valor corresponde a un día diferente.

¿Cómo se trabaja con matrices en NumPy?
Las matrices en NumPy se utilizan cuando trabajamos con dos dimensiones, lo cual es común en datos tabulares o imágenes. Almacenar y acceder a datos organizados en filas y columnas puede ser muy eficiente:

matriz = np.array([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
])
print(matriz)
Una matriz, como la del ejemplo, puede facilitar la representación de píxeles de una imagen o productos vendidos mes a mes en un conjunto de datos de ventas.

¿Qué es un tensor y cómo se representa?
Un tensor es una extensión de matrices a más dimensiones, utilizado para representar estructuras de datos más complejas, como imágenes en 3D en las que se trabaja con los canales RGB:

tensor = np.array([
    [
        [1, 2], [3, 4]
    ],
    [
        [5, 6], [7, 8]
    ]
])
print(tensor)
Un tensor de tres dimensiones como este puede manejar cantidades impresionantes de datos, ideal para proyectos avanzados de aprendizaje automático.

¿Cuáles son las formas de crear arrays en NumPy?
NumPy ofrece diversas formas para crear arrays, cada una adaptándose a situaciones específicas:

Conversión desde otras estructuras de Python, como listas y tuplas.
Funciones de creación, como np.zeros para matrices de ceros.
Replicación, unión o mutación de arrays existentes.
Lectura de arrays desde disco, en formatos estándar o personalizados.
Creación desde bytes crudos usando cadenas o buffers.
Funciones especiales de bibliotecas de álgebra lineal.
Veamos un ejemplo usando arange:

rango = np.arange(10)
print(rango)  # Salida: [0 1 2 3 4 5 6 7 8 9]
Y la creación de una matriz identidad:

identidad = np.eye(3)
print(identidad)
¿Qué otras funciones matemáticas puedo utilizar con NumPy?
NumPy ofrece varias funciones matemáticas avanzadas, como diag para crear matrices diagonales y random para generar matrices con valores aleatorios:

diagonal = np.diag([1, 2, 3, 4])
print(diagonal)

aleatoria = np.random.rand(2, 3)
print(aleatoria)
Estos métodos sirven para aplicaciones que van desde álgebra lineal hasta simulaciones estocásticas. Te recomiendo explorar más sobre métodos numéricos y álgebra lineal para sacar el máximo provecho de NumPy

20250926:

Diferencias de Listas y Arrays

Rendimiento: NumPy es mucho más rápido y eficiente para operaciones matemáticas y científicas.
Tipos de Datos: NumPy requiere homogeneidad de tipos, mientras que las listas de Python pueden contener múltiples tipos.
Funcionalidad: NumPy proporciona una rica funcionalidad específica para cálculos numéricos.
Slicing e Indexación: NumPy ofrece herramientas avanzadas para manipular subconjuntos de datos.
NumPy es la mejor opción. 

Para usos más generales y cuando se necesita mayor flexibilidad en los tipos de datos, las listas de Python son más adecuadas.

Especificando Tipos de Datos (Datatypes)
Al crear un array, podemos especificar el tipo de datos que contendrá utilizando el parámetro dtype. Esta especificación es crucial para la eficiencia y precisión en cálculos numéricos. Aquí se detallan algunos de los tipos de datos más comunes:

int32: Entero de 32 bits.
float32: Número de punto flotante de 32 bits.
float64: Número de punto flotante de 64 bits (por defecto para números flotantes en NumPy).
bool: Valores booleanos (True o False).
complex64: Número complejo de 64 bits.
complex128: Número complejo de 128 bits.
str: Cadenas de texto.

20251005
Broadcasting:

Broadcasting es una funcionalidad poderosa en NumPy que permite realizar operaciones aritméticas en arrays de diferentes tamaños y formas de manera eficiente. En lugar de iterar sobre cada elemento de los arrays para realizar las operaciones, NumPy extiende automáticamente los arrays más pequeños para que coincidan con las dimensiones de los más grandes, sin duplicar datos. Esto no solo optimiza el uso de la memoria, sino que también acelera significativamente las operaciones.
El broadcasting permite que las operaciones entre arrays de diferentes dimensiones se realicen como si todos los arrays tuvieran la misma forma. NumPy extiende los arrays más pequeños a la forma del más grande de manera implícita, facilitando las operaciones sin necesidad de copiar los datos.

Aplicaciones de Broadcasting:
Aplicación de Descuentos: Supongamos que tenemos un array que representa los precios de varios productos y otro array con un descuento porcentual que se aplica a todos los productos. Con broadcasting, podemos aplicar el descuento sin necesidad de un bucle explícito.

Importancia del Broadcasting:
Broadcasting es crucial porque permite escribir código más conciso y legible, evitando bucles explícitos y aprovechando las optimizaciones internas de NumPy para realizar operaciones de manera rápida y eficiente. Esto es especialmente útil en análisis de datos y aprendizaje automático, donde se manejan grandes volúmenes de datos y se requieren cálculos rápidos.

Reglas de Broadcasting:
Para que el broadcasting funcione, las dimensiones de los arrays deben cumplir ciertas reglas:

    1. Comparación desde la Última Dimensión: Las dimensiones se comparan desde la última hacia la primera.
    2. Dimensiones Compatibles: Dos dimensiones son compatibles si son iguales o si una de ellas es 1.



