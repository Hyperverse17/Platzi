
Resumen
La programación orientada a objetos (POO) es un paradigma de la programación que se basa en organizar el software en objetos, los cuales son instancias de clases. Las clases actúan como plantillas genéricas que definen atributos y comportamientos. Por ejemplo, una clase “Persona” puede tener atributos como nombre, apellido y fecha de nacimiento.

¿Cómo se crean clases y objetos en Python?
Para crear una clase en Python, se utiliza la palabra reservada class seguida del nombre de la clase con la primera letra en mayúscula. Dentro de la clase, se define un constructor con la función __init__. Esta función inicializa los atributos del objeto.

Self:
En Python, self es una referencia al objeto actual de una clase y se utiliza dentro de sus métodos para acceder a los atributos y otros métodos del mismo objeto. Es como el "puente" que conecta los datos y comportamientos específicos de una instancia.

Herencia:
La herencia, junto con la encapsulación y el polimorfismo, es una de las tres características principales de la programación orientada a objetos. 
La herencia permite crear clases que reutilizan, extienden y modifican el comportamiento definido en otras clases. La clase cuyos miembros se heredan se denomina clase base o padre y la clase que hereda esos miembros se denomina clase derivada o clase hija. 

Una clase hija solo puede tener una clase padre directa, pero la herencia es transitiva. Si ClassC se deriva de ClassB y ClassB se deriva de ClassA, ClassC hereda los miembros declarados en ClassB y ClassA.

Cuatro Pilares:
Encapsulamiento: Agrupa datos y métodos relacionados en una clase.
    Oculta los detalles internos y controla el acceso a los datos.
    Ejemplo: Una clase "Coche" que encapsula propiedades como "color" y métodos como "arrancar".

Abstracción: Simplifica sistemas complejos ocultando detalles innecesarios.
    Permite centrarse en las características esenciales de un objeto.
    Ejemplo: Una interfaz "Vehículo" con método "mover", sin especificar cómo se implementa.

Herencia: Permite que una clase (hija) herede propiedades y métodos de otra (padre).
    Promueve la reutilización de código y la jerarquía de clases.
    Ejemplo: "Coche" y "Moto" heredan de "Vehículo".

Polimorfismo: Permite que objetos de diferentes clases respondan al mismo método de manera única.
    Facilita el uso de una interfaz común para tipos de datos diversos.
    Ejemplo: Diferentes tipos de "Vehículo" implementan el método "mover" de forma distinta.

Super():
En Python, super() es una función que te permite acceder a métodos o atributos de una clase padre desde una clase hija. 
Es especialmente útil en el contexto de la herencia para garantizar que las clases derivadas llamen a los métodos de sus clases base correctamente, evitando sobreescrituras accidentales.


Para entender mejor la Programación Orientada a Objetos (POO), es esencial recordar los conceptos básicos de atributos y métodos.

Atributos: Son variables que pertenecen a una clase o a sus objetos. Definen las propiedades de un objeto. Por ejemplo, pensemos en una persona: ¿Qué caracteriza a una persona en general? Las personas tienen nombre, edad, dirección, etc. En términos de POO, estos serían los atributos de la clase Person.
Métodos: Son funciones definidas dentro de una clase que operan sobre sus objetos. Definen los comportamientos de un objeto. Siguiendo con el ejemplo de una persona, ¿Qué acciones puede realizar una persona? Puede hablar, caminar, comer, etc. En POO, estas acciones serían métodos de la clase Person.
Ejemplo Básico de una Clase
class Person:
    def __init__(self, name, age):
        self.name = name  # Atributo
        self.age = age    # Atributo

    def greet(self):
        print(f"Hola, mi nombre es {self.name} y tengo {self.age} años.")  # Método

# Crear una instancia de la clase Person
persona1 = Person("Ana", 30)
persona1.greet()  # Output: Hola, mi nombre es Ana y tengo 30 años.
al usar herencia vimos el método init() que es le cosntructor, el mismo es llamado automáticamente cuando se crea una nueva instancia de una clase y se utiliza para inicializar los atributos del objeto.

Ejemplo de Constructor
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# Crear una instancia de Person
person1 = Person("Ana", 30)
print(person1.name)  # Output: Ana
print(person1.age)   # Output: 30
En este ejemplo, el constructor __init__ inicializa los atributos name y age de la clase Person.

Uso de super() en Python
La función super() en Python te permite acceder y llamar a métodos definidos en la superclase desde una subclase. Esto es útil cuando quieres extender o modificar la funcionalidad de los métodos de la superclase sin tener que repetir su implementación completa.

Ejemplo de Uso de super()
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def greet(self):
        print("Hello! I am a person.")

class Student(Person):
    def __init__(self, name, age, student_id):
        super().__init__(name, age)
        self.student_id = student_id

    def greet(self):
        super().greet()
        print(f"Hi, I'm {self.name}, and I'm a student with ID: {self.student_id}")

# Crear instancia de Student y llamar a greet
student = Student("Ana", 20, "S12345")
student.greet()  # Output: Hello! I am a person.
                 #         Hi, I'm Ana, and I'm a student with ID: S12345
En este ejemplo:

La clase Person define un método greet() que imprime un saludo genérico.
La clase Student, que es una subclase de Person, utiliza super().__init__(name, age) para llamar al constructor de la superclase Person y luego sobrescribe el método greet() para agregar información específica del estudiante.
Jerarquía de Clases y Constructores
¿Qué sucede si una clase tiene una clase padre y esa clase padre tiene otra clase padre? En este caso, usamos super() para asegurar que todas las clases padre sean inicializadas correctamente.

Ejemplo de Jerarquía de Clases
class LivingBeing:
    def __init__(self, name):
        self.name = name

class Person(LivingBeing):
    def __init__(self, name, age):
        super().__init__(name)
        self.age = age

class Student(Person):
    def __init__(self, name, age, student_id):
        super().__init__(name, age)
        self.student_id = student_id

    def introduce(self):
        print(f"Hi, I'm {self.name}, {self.age} years old, and my student ID is {self.student_id}")

# Crear instancia de Student
student = Student("Carlos", 21, "S54321")
student.introduce()  # Output: Hi, I'm Carlos, 21 years old, and my student ID is S54321
En este ejemplo:

LivingBeing es la clase base que inicializa el atributo name.
Person es una subclase de LivingBeing que inicializa name a través de super().__init__(name) y luego inicializa age.
Student es una subclase de Person que inicializa name y age a través de super().__init__(name, age) y luego inicializa student_id.
Métodos que Vienen por Defecto en Python
En Python, todas las clases heredan de la clase base object. Esto significa que todas las clases tienen ciertos métodos por defecto, algunos de los cuales pueden ser útiles para personalizar el comportamiento de tus clases.

Métodos por Defecto Más Comunes
__init__(self): Constructor de la clase. Es llamado cuando se crea una nueva instancia de la clase. Inicializa los atributos del objeto.
__str__(self): Devuelve una representación en cadena del objeto, utilizada por print() y str(). Este método es útil para proporcionar una representación legible del objeto.
__repr__(self): Devuelve una representación “oficial” del objeto, utilizada por repr(). Este método está diseñado para devolver una cadena que represente al objeto de manera que se pueda recrear.
Ejemplo de Métodos __str__ y __repr__
Vamos a crear una clase Person que sobrescriba los métodos __str__ y __repr__.

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __str__(self):
        return f"{self.name}, {self.age} años"

    def __repr__(self):
        return f"Person(name={self.name}, age={self.age})"

# Crear instancias de Person
person1 = Person("Alice", 30)
person2 = Person("Bob", 25)

# Uso de __str__
print(person1)  # Output: Alice, 30 años

# Uso de __repr__
print(repr(person1))  # Output: Person(name=Alice, age=30)
Explicación del Código
El método __str__ devuelve una representación en cadena del objeto, útil para mensajes de salida amigables.
El método __repr__ devuelve una representación más detallada del objeto, útil para la depuración.
Estos métodos proporcionan una manera conveniente de representar y comparar objetos, lo que facilita la depuración y el uso de los objetos en el código.

Importancia de Aprender estos Conceptos
Comprender y utilizar super(), los métodos por defecto y los constructores es crucial para escribir código limpio, eficiente y reutilizable en Python. Estos conceptos permiten:

Extender Funcionalidades: super() permite extender las funcionalidades de una superclase sin duplicar código.
Inicialización Correcta: El uso adecuado de constructores asegura que todos los atributos sean inicializados correctamente.
Personalizar Representaciones: Métodos como __str__ y __repr__ permiten personalizar cómo se representan los objetos, facilitando la depuración y el manejo de datos.
Comparar y Ordenar Objetos: Métodos como __eq__, __lt__, etc., permiten definir cómo se comparan y ordenan los objetos, lo cual es esencial para muchas operaciones de datos

